{
  "version": 3,
  "file": "ngx-mask.js",
  "sources": [
    "ng://ngx-mask/out/app/ngx-mask/ngx-mask.module.ts",
    "ng://ngx-mask/out/app/ngx-mask/mask.directive.ts",
    "ng://ngx-mask/out/app/ngx-mask/mask.service.ts",
    "ng://ngx-mask/out/app/ngx-mask/config.ts"
  ],
  "sourcesContent": [
    "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaskDirective } from './mask.directive';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MaskDirective],\n  declarations: [MaskDirective]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n",
    "import {\n  Directive, HostListener, Inject, Input\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: MaskService,\n      multi: true\n    },\n    MaskService\n  ],\n})\nexport class MaskDirective {\n\n  private _maskValue: string;\n\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService,\n  ) { }\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    this._maskValue = value || '';\n    if (!this._maskValue) {\n      return;\n    }\n    this._maskService.maskExpression = this._maskValue;\n    this._maskService.maskSetter$$.emit(this._maskValue);\n  }\n\n  @Input()\n  public set specialCharacters(value: IConfig['specialCharacters']) {\n    if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {\n      return;\n    }\n    this._maskService.maskSpecialCharacters = value;\n  }\n\n  @Input()\n  public set patterns(value: IConfig['patterns']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskAvailablePatterns = value;\n  }\n\n  @Input()\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n    this._maskService.dropSpecialCharacters = value;\n  }\n\n  @Input()\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n    this._maskService.clearIfNotMatch = value;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: KeyboardEvent): void {\n    const el: HTMLInputElement = (e.target as HTMLInputElement);\n\n    if (!this._maskValue) {\n      this._maskService.onChange(el.value);\n      return;\n    }\n\n    const position: number = el.selectionStart as number;\n    let caretShift: number = 0;\n\n    this._maskService.applyValueChanges(\n      position,\n      (shift: number) => caretShift = shift\n    );\n\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n     return;\n    }\n    el.selectionStart = el.selectionEnd = position + (\n      // tslint:disable-next-line\n      (e as any).inputType === 'deleteContentBackward'\n        ? 0\n        : caretShift\n    );\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._maskService.clearIfNotMatchFn();\n    this._maskService.onTouch();\n  }\n}\n",
    "import { ElementRef, EventEmitter, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { take } from 'rxjs/operators/take';\n\n@Injectable()\nexport class MaskService implements ControlValueAccessor {\n\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public clearIfNotMatch: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public maskSpecialCharacters: IConfig['specialCharacters'];\n  public maskAvailablePatterns: IConfig['patterns'];\n  public maskSetter$$: EventEmitter<string> = new EventEmitter();\n\n  private _shift: Set<number>;\n  private _formElement: HTMLInputElement;\n\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n\n  public onTouch = () => { };\n\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) private _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n  ) {\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config!.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    // this._regExpForRemove = new RegExp(this.maskSpecialCharacters\n    //   .map((item: string) => `\\\\${item}`)\n    //   .join('|'), 'gi');\n\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => { }): string {\n    if (inputValue === undefined || inputValue === null) {\n      return '';\n    }\n\n    let cursor: number = 0;\n    let result: string = '';\n\n    const inputArray: string[] = inputValue.toString()\n      .split('');\n    // tslint:disable-next-line\n    for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n    < inputArray.length; i++ , inputSymbol = inputArray[i]) {\n      if (result.length === maskExpression.length) {\n        break;\n      }\n\n      if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n        result += inputSymbol;\n        cursor++;\n      } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n        result += maskExpression[cursor];\n        cursor++;\n        this._shift.add(cursor);\n        i--;\n      } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n        && this.maskAvailablePatterns[maskExpression[cursor]]\n        && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n        cursor++;\n        i--;\n      }\n    }\n    if (result.length + 1 === maskExpression.length\n      && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let shift: number = 1;\n    let newPosition: number = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    cb(this._shift.has(position) ? shift : 0);\n\n\n    Array.isArray(this.dropSpecialCharacters)\n      ? this.onChange(this._removeMask(result, this.dropSpecialCharacters))\n      : this.dropSpecialCharacters === true\n      ? this.onChange(this._removeMask(result, this.maskSpecialCharacters))\n      : this.onChange(result);\n\n    return result;\n  }\n\n  public applyValueChanges(position: number = 0, cb: Function = () => { }): void {\n    const maskedInput: string = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n\n    this._formElement.value = maskedInput;\n\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true && this.maskExpression.length\n      !== this._formElement.value.length) {\n      this._formElementProperty = ['value', ''];\n    }\n  }\n\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string): Promise<void> {\n    if (inputValue === undefined || inputValue === null) {\n      return;\n    }\n    const maskExpression: string = this.maskExpression || await this.maskSetter$$.pipe(take(1))\n      .toPromise();\n\n    inputValue\n      ? this._formElementProperty = ['value', this.applyMask(inputValue, maskExpression)]\n      : this._formElementProperty = ['value', ''];\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._formElementProperty = ['disabled', isDisabled];\n  }\n\n  private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    return inputSymbol\n      === maskSymbol\n      || this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern\n      && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n\n  private set _formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string []): RegExp {\n    return new RegExp(specialCharactersForRemove\n      .map((item: string) => `\\\\${item}`)\n      .join('|'), 'gi');\n  }\n\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  clearIfNotMatch: boolean;\n  dropSpecialCharacters: boolean | string[];\n  specialCharacters: string[];\n  patterns: {\n    [character: string]: {\n      pattern: RegExp,\n      optional?: boolean\n    }\n  };\n}\n\nexport type optionsConfig = {\n  [P in keyof IConfig]?: IConfig[P]\n};\n\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n  clearIfNotMatch: false,\n  dropSpecialCharacters: true,\n  specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ','],\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    'A': {\n      pattern: new RegExp('\\[a-zA-Z0-9\\]')\n    },\n    'S': {\n      pattern: new RegExp('\\[a-zA-Z\\]')\n    }\n  }\n};\n"
  ],
  "names": [],
  "mappings": "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"
}
